name <- paste("Season", i, sep="")
if( !is.null(g4[[name]])) next
g4[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_4[[name]]))
}
# Ep 5
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g5[[name]])) next
g5[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_5[[name]]))
}
# Ep 6
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g6[[name]])) next
g6[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_6[[name]]))
}
# Ep 7
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g7[[name]])) next
g7[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_7[[name]]))
}
# Ep 8
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g8[[name]])) next
g8[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_8[[name]]))
}
# Ep 9
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g9[[name]])) next
g9[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_9[[name]]))
}
# Ep 10
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g10[[name]])) next
g10[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_10[[name]]))
}
# Ep 11
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g11[[name]])) next
g11[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_11[[name]]))
}
# Ep 12
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g12[[name]])) next
g12[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_12[[name]]))
}
# Ep 13
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(g13[[name]])) next
g13[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_13[[name]]))
}
# Ep 14
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(epi_14[[name]])){
g14[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_14[[name]]))
}
}
# Ep 15
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(epi_15[[name]])){
g15[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_15[[name]]))
}
}
# Ep 16
for (i in 1:37){
name <- paste("Season", i, sep="")
if( !is.null(epi_16[[name]])){
g16[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_16[[name]]))
}
}
# Stats
stat1 <- list()
stat2 <- list()
stat3 <- list()
stat4 <- list()
stat5 <- list()
stat6 <- list()
stat7 <- list()
stat8 <- list()
stat9 <- list()
stat10 <- list()
stat11 <- list()
stat12 <- list()
stat13 <- list()
stat14 <- list()
stat15 <- list()
stat16 <- list()
statistics = function(graph,stat){
for (i in 1:37){
name <- paste("Season", i, sep="")
if(is.null(graph[[name]])) next
temp_g <- graph[[name]]
players <- get.data.frame(temp_g, what="vertices")
for (j in 1:nrow(players)){
players$rank[j] <- j
}
players$closeness <- closeness(temp_g)
players$betweenness <- betweenness(temp_g)
players$degree <- degree(temp_g, mode="all")
players$eigencentrality <- eigen_centrality(temp_g)$vector
players$pagerank <- page.rank(temp_g)$vector
stat[[name]] <- players
}
return(stat)
}
#statistics for each episode and season wise
stat1 = statistics(g1,stat1)
stat2 = statistics(g2,stat2)
stat3 = statistics(g3,stat3)
stat4 = statistics(g4,stat4)
stat5 = statistics(g5,stat4 )
stat6 = statistics(g6,stat6)
stat7 = statistics(g7,stat7)
stat8 = statistics(g8,stat8)
stat9 = statistics(g9,stat9)
stat10 = statistics(g10,stat10)
stat11 = statistics(g11,stat11)
stat12 = statistics(g12,stat12)
stat13 = statistics(g13,stat13)
stat14 = statistics(g14,stat14)
stat15 = statistics(g15,stat15)
stat16 = statistics(g16,stat16)
#function to create a big dataframe episode wise for training dataset
Create_train = function(stat){
big_df=data.frame(name=character() ,rank=character(),closeness=double(),betweenness=double(),
degree=double(),eigencentrality=double(),pagerank =double())
for (i in 1:length(stat)-1){
name <- paste("Season", i, sep="")
big_df = rbind(stat[[name]], big_df)
}
return(big_df)
}
#function to create a test dataframe
Create_test= function(stat){
i=length(stat)
name <- paste("Season", i, sep="")
return(stat[[name]])
}
#############################################################################################PREDICTIONS
MSE=c()
#create training data set
epi_1_train= Create_train(stat1)
#create test dataset
epi_1_test=  Create_test(stat1)
epi_1_test= epi_1_test[ , -c(1,2)]
row.names(epi_1_test) <-NULL
View(epi_1_test)
#Target variable
epi_1_y_hat=  Create_test(stat1)["rank"]
row.names(epi_1_y_hat) <- NULL
#run regression
epi_1_regression=lm(rank~closeness+betweenness+degree+eigencentrality+pagerank ,data=epi_1_train)
summary(epi_1_regression)
#prediction
predict_1 = predict(epi_1_regression,epi_1_test)
#MSE
MSE[1] =sum(((predict_1 - epi_1_y_hat)^2))
epi_1_train
library(readr)
library(igraph)
library(dplyr)
library(tidyr)
library(ggplot2)
rm(list = ls())
setwd("C:/Users/Daniel Weinberg/Desktop/MSBA 2020/Fall/Social Network Analysis/Survivor/Final Project")
library(readr)
library(igraph)
library(dplyr)
library(tidyr)
library(ggplot2)
rm(list = ls())
setwd("C:/Users/Daniel Weinberg/Desktop/MSBA 2020/Fall/Social Network Analysis/Survivor/Final Project")
#import the data
S1 <- read_csv("S1/Season 1 Raw.csv" ,col_names = FALSE)
S2 <- read_csv("S2/Season 2 Raw.csv" ,col_names = FALSE)
S3 <- read_csv("S3/Season 3 Raw.csv" ,col_names = FALSE)
S4 <- read_csv("S4/Season 4 Raw.csv" ,col_names = FALSE)
S5 <- read_csv("S5/Season 5 Raw.csv" ,col_names = FALSE)
S6 <- read_csv("S6/Season 6 Raw.csv" ,col_names = FALSE)
S7 <- read_csv("S7/Season 7 Raw.csv" ,col_names = FALSE)
S8 <- read_csv("S8/Season 8 Raw.csv" ,col_names = FALSE)
S9 <- read_csv("S9/Season 9 Raw.csv" ,col_names = FALSE)
S10 <- read_csv("S10/Season 10 Raw.csv" ,col_names = FALSE)
S11 <- read_csv("S11/Season 11 Raw.csv" ,col_names = FALSE)
S12 <- read_csv("S12/Season 12 Raw.csv" ,col_names = FALSE)
S13 <- read_csv("S13/Season 13 Raw.csv" ,col_names = FALSE)
S14 <- read_csv("S14/Season 14 Raw.csv" ,col_names = FALSE)
S15 <- read_csv("S15/Season 15 Raw.csv" ,col_names = FALSE)
S16 <- read_csv("S16/Season 16 Raw.csv" ,col_names = FALSE)
S17 <- read_csv("S17/Season 17 Raw.csv" ,col_names = FALSE)
S18 <- read_csv("S18/Season 18 Raw.csv" ,col_names = FALSE)
S19 <- read_csv("S19/Season 19 Raw.csv" ,col_names = FALSE)
S20 <- read_csv("S20/Season 20 Raw.csv" ,col_names = FALSE)
S21 <- read_csv("S21/Season 21 Raw.csv" ,col_names = FALSE)
S22 <- read_csv("S22/Season 22 Raw.csv" ,col_names = FALSE)
S23 <- read_csv("S23/Season 23 Raw.csv" ,col_names = FALSE)
S24 <- read_csv("S24/Season 24 Raw.csv" ,col_names = FALSE)
S25 <- read_csv("S25/Season 25 Raw.csv" ,col_names = FALSE)
S26 <- read_csv("S26/Season 26 Raw.csv" ,col_names = FALSE)
S27 <- read_csv("S27/Season 27 Raw.csv" ,col_names = FALSE)
S28 <- read_csv("S28/Season 28 Raw.csv" ,col_names = FALSE)
S29 <- read_csv("S29/Season 29 Raw.csv" ,col_names = FALSE)
S30 <- read_csv("S30/Season 30 Raw.csv" ,col_names = FALSE)
S31 <- read_csv("S31/Season 31 Raw.csv" ,col_names = FALSE)
S32 <- read_csv("S32/Season 32 Raw.csv" ,col_names = FALSE)
S33 <- read_csv("S33/Season 33 Raw.csv" ,col_names = FALSE)
S34 <- read_csv("S34/Season 34 Raw.csv" ,col_names = FALSE)
S35 <- read_csv("S35/Season 35 Raw.csv" ,col_names = FALSE)
S36 <- read_csv("S36/Season 36 Raw.csv" ,col_names = FALSE)
S37 <- read_csv("S37/Season 37 Raw.csv" ,col_names = FALSE)
S38 <- read_csv("S38/Season 38 Raw.csv" ,col_names = FALSE)
#lists of each episodes
epi_1=list()
epi_2=list()
epi_3=list()
epi_4=list()
epi_5=list()
epi_6=list()
epi_7=list()
epi_8=list()
epi_9=list()
epi_10=list()
epi_11=list()
epi_12=list()
epi_13=list()
epi_14=list()
epi_15=list()
epi_16=list()
main_list = list(S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16,S17,S18,S19,S20,S21,S22,S23,S24,
S25,S26,S27,S28,S29,S30,S31,S32,S33,S34,S35,S36,S37,S38)
count=0
for(m in main_list){
count=count+1
m=as.data.frame(m)
row.names(m) = m[,1]
df=m
df[ , ] =0
dim(df)
X=''
if(dim(df)[1] > dim(df)[2]){
diff = dim(df)[1]-dim(df)[2]
for(i in seq(diff)){
col_name = paste(X, dim(df)[2] +i ,sep="_")
df[col_name] <-0
}
}else if(dim(df)[1] < dim(df)[2]){
diff=dim(df)[2]-dim(df)[1]
for(i in seq(diff)){
df=df[ ,-ncol(df)]
}
}else{
df=df
}
colnames(df)=row.names(df)
for(i in 2: (ncol(m))){
voted_out = na.omit(unique(m[[i]]))
for(j in seq_along(voted_out)){
t= voted_out[j]
a= m[m[i]==t , ]
q=  na.omit(a$X1)
df[q,q ]= df[q,q]+1
diag(df)<-0
}
if(i ==2){
name1 <- paste("Season", count, sep="")
epi_1[[name1]] <-df
} else if(i ==3){
name2 <- paste("Season", count, sep="")
epi_2[[name2]] <-df
} else if(i ==4){
sEOG <- paste("Season", count, sep="")
epi_3[[sEOG]] <-df
} else if(i ==5){
sEOG <- paste("Season", count, sep="")
epi_4[[sEOG]] <-df
} else if(i ==6){
sEOG <- paste("Season", count, sep="")
epi_5[[sEOG]] <-df
} else if(i ==7){
sEOG <- paste("Season", count, sep="")
epi_6[[sEOG]] <-df
} else if(i ==8){
sEOG <- paste("Season", count, sep="")
epi_7[[sEOG]] <-df
} else if(i ==9){
sEOG <- paste("Season", count, sep="")
epi_8[[sEOG]] <-df
} else if(i ==10){
sEOG <- paste("Season", count, sep="")
epi_9[[sEOG]] <-df
} else if(i ==11){
sEOG <- paste("Season", count, sep="")
epi_10[[sEOG]] <-df
} else if(i ==12){
sEOG <- paste("Season", count, sep="")
epi_11[[sEOG]] <-df
} else if(i ==13){
sEOG <- paste("Season", count, sep="")
epi_12[[sEOG]] <-df
} else if(i ==14){
sEOG <- paste("Season", count, sep="")
epi_13[[sEOG]] <-df
} else if(i ==15){
sEOG <- paste("Season", count, sep="")
epi_14[[sEOG]] <-df
} else if(i ==16){
sEOG <- paste("Season", count, sep="")
epi_15[[sEOG]] <-df
} else {
name <- paste("Season", count, sep="")
epi_16[[name]] <-df
}
}
}
g1 <- list()
g2 <- list()
g3 <- list()
g4 <- list()
g5 <- list()
g6 <- list()
g7 <- list()
g8 <- list()
g9 <- list()
g10 <- list()
g11 <- list()
g12 <- list()
g13 <- list()
g14 <- list()
g15 <- list()
g16 <- list()
# Ep 1
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g1[[name]])) next
g1[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_1[[name]]))
}
# Ep 2
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g2[[name]])) next
g2[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_2[[name]]))
}
# Ep 3
for (i in 1:38){
name <- paste("Season", i, sep="")
g3[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_3[[name]]))
}
# Ep 4
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g4[[name]])) next
g4[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_4[[name]]))
}
# Ep 5
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g5[[name]])) next
g5[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_5[[name]]))
}
# Ep 6
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g6[[name]])) next
g6[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_6[[name]]))
}
# Ep 7
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g7[[name]])) next
g7[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_7[[name]]))
}
# Ep 8
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g8[[name]])) next
g8[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_8[[name]]))
}
# Ep 9
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g9[[name]])) next
g9[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_9[[name]]))
}
# Ep 10
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g10[[name]])) next
g10[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_10[[name]]))
}
# Ep 11
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g11[[name]])) next
g11[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_11[[name]]))
}
# Ep 12
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g12[[name]])) next
g12[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_12[[name]]))
}
# Ep 13
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(g13[[name]])) next
g13[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_13[[name]]))
}
# Ep 14
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(epi_14[[name]])){
g14[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_14[[name]]))
}
}
# Ep 15
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(epi_15[[name]])){
g15[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_15[[name]]))
}
}
# Ep 16
for (i in 1:38){
name <- paste("Season", i, sep="")
if( !is.null(epi_16[[name]])){
g16[[name]] <- graph_from_adjacency_matrix(as.matrix(epi_16[[name]]))
}
}
# Stats
stat1 <- list()
stat2 <- list()
stat3 <- list()
stat4 <- list()
stat5 <- list()
stat6 <- list()
stat7 <- list()
stat8 <- list()
stat9 <- list()
stat10 <- list()
stat11 <- list()
stat12 <- list()
stat13 <- list()
stat14 <- list()
stat15 <- list()
stat16 <- list()
statistics = function(graph,stat){
for (i in 1:38){
name <- paste("Season", i, sep="")
if(is.null(graph[[name]])) next
temp_g <- graph[[name]]
players <- get.data.frame(temp_g, what="vertices")
for (j in 1:nrow(players)){
players$rank[j] <- j
}
players$closeness <- closeness(temp_g)
players$betweenness <- betweenness(temp_g)
players$degree <- degree(temp_g, mode="in")
players$eigencentrality <- eigen_centrality(temp_g)$vector
players$pagerank <- page.rank(temp_g)$vector
players$similarity <- similarity(temp_g, mode = 'all', method = "jaccard")
stat[[name]] <- players
}
return(stat)
}
#statistics for each episode and season wise
stat1 = statistics(g1,stat1)
stat2 = statistics(g2,stat2)
stat3 = statistics(g3,stat3)
stat4 = statistics(g4,stat4)
stat5 = statistics(g5,stat5)
stat6 = statistics(g6,stat6)
stat7 = statistics(g7,stat7)
stat8 = statistics(g8,stat8)
stat9 = statistics(g9,stat9)
stat10 = statistics(g10,stat10)
stat11 = statistics(g11,stat11)
stat12 = statistics(g12,stat12)
stat13 = statistics(g13,stat13)
stat14 = statistics(g14,stat14)
stat15 = statistics(g15,stat15)
stat16 = statistics(g16,stat16)
#function to create a big dataframe episode wise for training dataset
Create_train = function(stat){
big_df=data.frame(name=character() ,rank=character(),closeness=double(),betweenness=double(),
degree=double(),eigencentrality=double(),pagerank =double(), similarity=double())
for (i in 1:length(stat)-1){
name <- paste("Season", i, sep="")
big_df = rbind(stat[[name]], big_df)
}
return(big_df)
}
Create_test= function(stat){
i=length(stat)
name <- paste("Season", i, sep="")
return(stat[[name]])
}
#############################################################################################PREDICTIONS
MSE=c()
#create training data set
epi_1_train= Create_train(stat1)
#create test dataset
epi_1_test=  Create_test(stat1)
epi_1_test= epi_1_test[ , -c(1,2)]
